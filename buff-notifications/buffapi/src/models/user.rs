/*
 * buff
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct User {
    #[serde(rename = "steam_id")]
    pub steam_id: String,
    #[serde(
        rename = "trade_url",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub trade_url: Option<Option<String>>,
    #[serde(
        rename = "email",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub email: Option<Option<String>>,
    #[serde(rename = "registered_at")]
    pub registered_at: String,
    #[serde(
        rename = "username",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub username: Option<Option<String>>,
    #[serde(
        rename = "avatar_url",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub avatar_url: Option<Option<String>>,
}

impl User {
    pub fn new(steam_id: String, registered_at: String) -> User {
        User {
            steam_id,
            trade_url: None,
            email: None,
            registered_at,
            username: None,
            avatar_url: None,
        }
    }
}
