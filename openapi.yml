openapi: 3.0.3
info:
  title: buff
  description: ""
  license:
    name: ""
  version: 0.1.0
paths:
  /api/admin/blacklist:
    get:
      tags:
        - handlers::admin::blacklist
      operationId: full_blacklist
      responses:
        "200":
          description: Blacklist was successfully retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  type: integer
                  format: int64
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
      security:
        - jwt_admin: []
    post:
      tags:
        - handlers::admin::blacklist
      operationId: blacklist_user
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BlacklistUserRequest"
        required: true
      responses:
        "204":
          description: User was successfully blacklisted
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
        "404":
          description: User was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
        "409":
          description: User has already been blacklisted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
      security:
        - jwt_admin: []
    delete:
      tags:
        - handlers::admin::blacklist
      operationId: unblacklist_user
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UnblacklistUserRequest"
        required: true
      responses:
        "204":
          description: User was successfully unblacklisted
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
        "404":
          description: User was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
        "409":
          description: User is not blacklisted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
      security:
        - jwt_admin: []
  /api/admin/currency:
    post:
      tags:
        - handlers::admin::currency
      operationId: create_currency
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCurrencyRequest"
        required: true
      responses:
        "201":
          description: Currency rate was successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
  /api/admin/currency/{id}:
    delete:
      tags:
        - handlers::admin::currency
      operationId: delete_currency_rate_by_id
      parameters:
        - name: id
          in: path
          description: Currency rate id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: Currency rate was successfully deleted
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
        "404":
          description: Currency was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
      security:
        - jwt_admin: []
    patch:
      tags:
        - handlers::admin::currency
      operationId: set_currency_rate_by_id
      parameters:
        - name: id
          in: path
          description: Currency rate id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SetRateRequest"
        required: true
      responses:
        "204":
          description: Currency rate was successfully changed
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
        "404":
          description: Currency was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
      security:
        - jwt_admin: []
  /api/admin/moderator:
    get:
      tags:
        - handlers::admin::moderators
      operationId: list_moderators
      responses:
        "200":
          description: Moderators were successfully retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ModeratorResponse"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
      security:
        - jwt_admin: []
    post:
      tags:
        - handlers::admin::moderators
      operationId: create_moderator
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ModeratorCredentials"
        required: true
      responses:
        "200":
          description: Moderator was successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ModeratorResponse"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
        "409":
          description: Login was occupied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
      security:
        - jwt_admin: []
  /api/admin/moderator/assign:
    patch:
      tags:
        - handlers::admin::moderators
      operationId: assign_moderator
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AssignModeratorRequest"
        required: true
      responses:
        "204":
          description: Moderator was successfully assigned to the order
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
        "403":
          description: Moderator has admin role
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
        "404":
          description: Moderator was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
      security:
        - jwt_admin: []
  /api/admin/moderator/orders:
    get:
      tags:
        - handlers::admin::moderators
      operationId: list_moderators_orders
      responses:
        "200":
          description: Orders were successfully retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Order"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
        "404":
          description: Moderator was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
      security:
        - jwt_admin: []
  /api/admin/moderator/unassign:
    patch:
      tags:
        - handlers::admin::moderators
      operationId: unassign_moderator
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UnassignModeratorRequest"
        required: true
      responses:
        "204":
          description: Moderator was successfully unassigned from the order
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
        "409":
          description: Some conflict occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
      security:
        - jwt_admin: []
  /api/admin/moderator/{id}:
    delete:
      tags:
        - handlers::admin::moderators
      operationId: delete_moderator
      parameters:
        - name: id
          in: path
          description: Moderator id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: Moderator was successfully deleted
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
        "403":
          description: Moderator has admin role
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
        "404":
          description: Moderator was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
      security:
        - jwt_admin: []
  /api/admin/order/all-in-period:
    get:
      tags:
        - handlers::admin::orders
      operationId: all_in_period
      parameters:
        - name: start_datetime
          in: query
          required: true
          schema:
            type: string
            format: date-time
        - name: end_datetime
          in: query
          required: true
          schema:
            type: string
            format: date-time
      responses:
        "200":
          description: Orders were successfully retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Order"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
      security:
        - jwt_admin: []
  /api/admin/order/{id}/cancel:
    patch:
      tags:
        - handlers::admin::orders
      operationId: cancel_order_by_id
      parameters:
        - name: id
          in: path
          description: Order id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: Order was successfully canceled
        "400":
          description: Order has already been marked as succeeded
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
        "404":
          description: Order was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
      security:
        - jwt_admin: []
  /api/admin/order/{id}/success:
    patch:
      tags:
        - handlers::admin::orders
      operationId: finish_order_by_id
      parameters:
        - name: id
          in: path
          description: Order id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: Order was marked as succeeded
        "400":
          description: Order has already been marked as canceled
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
        "404":
          description: Order was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
      security:
        - jwt_admin: []
  /api/admin/review/video:
    post:
      tags:
        - handlers::admin::reviews
      operationId: add_video_review
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddVideoReviewRequest"
        required: true
      responses:
        "204":
          description: Video review was successfully saved
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
        "409":
          description: Provided url has already been added to video reviews
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
      security:
        - jwt_admin: []
    delete:
      tags:
        - handlers::admin::reviews
      operationId: remove_video_review
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RemoveVideoReviewRequest"
        required: true
      responses:
        "204":
          description: Video review was successfully deleted
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
        "404":
          description: Provided review id does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
      security:
        - jwt_admin: []
  /api/auth/admin/login:
    post:
      tags:
        - handlers::auth::admins
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Credentials"
        required: true
      responses:
        "200":
          description: Admin or moderator was successfully authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminLoginResponse"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
        "401":
          description: Bad username or password
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
  /api/auth/user/callback:
    get:
      tags:
        - handlers::auth::users
      operationId: login
      parameters:
        - name: openid.ns
          in: query
          required: true
          schema:
            type: string
        - name: openid.mode
          in: query
          required: true
          schema:
            type: string
        - name: openid.op_endpoint
          in: query
          required: true
          schema:
            type: string
        - name: openid.claimed_id
          in: query
          required: true
          schema:
            type: string
        - name: openid.identity
          in: query
          required: false
          schema:
            type: string
            nullable: true
        - name: openid.return_to
          in: query
          required: true
          schema:
            type: string
        - name: openid.response_nonce
          in: query
          required: true
          schema:
            type: string
        - name: openid.invalidate_handle
          in: query
          required: false
          schema:
            type: string
            nullable: true
        - name: openid.assoc_handle
          in: query
          required: true
          schema:
            type: string
        - name: openid.signed
          in: query
          required: true
          schema:
            type: string
        - name: openid.sig
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: User was successfully authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JwtResponse"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
        "403":
          description: Steam denied user registration
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
  /api/auth/user/link:
    get:
      tags:
        - handlers::auth::users
      operationId: login_link
      responses:
        "200":
          description: Link was successfully generated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginLinkResponse"
  /api/currency:
    get:
      tags:
        - handlers::currency
      operationId: get_currency_rates
      responses:
        "200":
          description: Currency rates were successfully retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Currency"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
  /api/currency/{id}:
    get:
      tags:
        - handlers::currency
      operationId: get_currency_rate_by_id
      parameters:
        - name: id
          in: path
          description: Currency rate id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Currency rate was successfully retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Currency"
        "404":
          description: Currency was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
  /api/review:
    get:
      tags:
        - handlers::reviews::users
      operationId: all_users_reviews
      responses:
        "200":
          description: Reviews were successfully retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Review"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
    post:
      tags:
        - handlers::reviews::users
      operationId: add_users_review
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddReviewRequest"
        required: true
      responses:
        "204":
          description: Review was successfully saved
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
      security:
        - jwt_user: []
  /api/review/video:
    get:
      tags:
        - handlers::reviews::users
      operationId: all_video_reviews
      responses:
        "200":
          description: Video reviews were successfully retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/VideoReview"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
  /api/status/user:
    get:
      tags:
        - handlers::status::users
      operationId: fetch_status
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StatusRequest"
        required: true
      responses:
        "200":
          description: Status was successfully retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/StatusResponse"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
    patch:
      tags:
        - handlers::status::users
      operationId: refresh_status
      responses:
        "204":
          description: Status was successfully refreshed
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
      security:
        - jwt_user: []
  /api/user:
    get:
      tags:
        - handlers::user
      operationId: get_user
      responses:
        "200":
          description: User was successfully retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
      security:
        - jwt_user: []
  /api/user/email:
    patch:
      tags:
        - handlers::user
      operationId: set_email
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmailForm"
        required: true
      responses:
        "200":
          description: Email was successfully changed
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
      security:
        - jwt_user: []
  /api/user/order:
    get:
      tags:
        - handlers::orders
      operationId: list_orders
      responses:
        "200":
          description: Orders were successfully retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Order"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
      security:
        - jwt_user: []
    post:
      tags:
        - handlers::orders
      operationId: create_order
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateOrderRequest"
        required: true
      responses:
        "201":
          description: Order was successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
        "404":
          description: Currency symbol was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
      security:
        - jwt_user: []
  /api/user/order/{id}:
    get:
      tags:
        - handlers::orders
      operationId: get_order
      parameters:
        - name: id
          in: path
          description: Order id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Order was successfully retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
        "404":
          description: Order was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
      security:
        - jwt_user: []
    patch:
      tags:
        - handlers::orders
      operationId: set_requisites
      parameters:
        - name: id
          in: path
          description: Order id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SetRequisitesRequest"
        required: true
      responses:
        "204":
          description: Requisites were successfully set
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
        "404":
          description: Order was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
      security:
        - jwt_user: []
  /api/user/order/{id}/cancel:
    patch:
      tags:
        - handlers::orders
      operationId: cancel_order
      parameters:
        - name: id
          in: path
          description: Order id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: Order was successfully canceled
        "400":
          description: Order has already been marked as succeeded
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
        "404":
          description: Order was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
      security:
        - jwt_user: []
  /api/user/top:
    get:
      tags:
        - handlers::user
      operationId: get_top
      parameters:
        - name: limit
          in: query
          required: true
          schema:
            type: integer
            format: int64
            minimum: 0
        - name: offset
          in: query
          required: true
          schema:
            type: integer
            format: int64
            minimum: 0
      responses:
        "200":
          description: Top users were successfully retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TopUser"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
  /api/user/trade-url:
    patch:
      tags:
        - handlers::user
      operationId: set_trade_url
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TradeUrlForm"
        required: true
      responses:
        "200":
          description: Trade url was successfully changed
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Details"
      security:
        - jwt_user: []
components:
  schemas:
    AddReviewRequest:
      type: object
      required:
        - review
        - stars
      properties:
        review:
          type: string
        stars:
          type: integer
          format: int32
    AddVideoReviewRequest:
      type: object
      required:
        - url
      properties:
        url:
          type: string
    AdminLoginResponse:
      type: object
      required:
        - token
      properties:
        token:
          type: string
    AssignModeratorRequest:
      type: object
      required:
        - order_id
      properties:
        order_id:
          type: integer
          format: int64
    BlacklistUserRequest:
      type: object
      required:
        - steam_id
      properties:
        steam_id:
          type: integer
          format: int64
    Bounds:
      type: object
      required:
        - limit
        - offset
      properties:
        limit:
          type: integer
          format: int64
          minimum: 0
        offset:
          type: integer
          format: int64
          minimum: 0
    CreateCurrencyRequest:
      type: object
      required:
        - symbol
        - rate
      properties:
        symbol:
          type: string
        rate:
          type: string
    CreateOrderRequest:
      type: object
      required:
        - payment_method
        - amount
        - currency
      properties:
        payment_method:
          type: string
        amount:
          type: string
        currency:
          type: string
    Credentials:
      type: object
      required:
        - login
        - password
      properties:
        login:
          type: string
        password:
          type: string
    Currency:
      type: object
      required:
        - symbol
        - rate
      properties:
        symbol:
          type: string
        rate:
          type: string
    Details:
      type: object
      required:
        - details
      properties:
        details:
          type: string
    EmailForm:
      type: object
      properties:
        email:
          type: string
          nullable: true
    JwtResponse:
      type: object
      required:
        - token
      properties:
        token:
          type: string
    LoginLinkResponse:
      type: object
      required:
        - link
      properties:
        link:
          type: string
    ModeratorCredentials:
      type: object
      required:
        - login
        - password
      properties:
        login:
          type: string
        password:
          type: string
    ModeratorResponse:
      type: object
      required:
        - id
        - login
      properties:
        id:
          type: integer
          format: int64
        login:
          type: string
    Order:
      type: object
      required:
        - id
        - payment_method
        - status
        - created_at
        - steam_id
        - amount
        - fixed_currency_rate
        - currency_symbol
      properties:
        id:
          type: integer
          format: int64
        payment_method:
          type: string
        status:
          type: string
        created_at:
          type: string
          format: date-time
        steam_id:
          type: integer
          format: int64
        moderator_id:
          type: integer
          format: int64
          nullable: true
        amount:
          type: string
        fixed_currency_rate:
          type: string
        currency_symbol:
          type: string
        finished_at:
          type: string
          format: date-time
          nullable: true
    RemoveVideoReviewRequest:
      type: object
      required:
        - id
      properties:
        id:
          type: integer
          format: int64
    Review:
      type: object
      required:
        - id
        - steam_id
        - review
        - stars
        - created_at
      properties:
        id:
          type: integer
          format: int64
        steam_id:
          type: integer
          format: int64
        review:
          type: string
        stars:
          type: integer
          format: int32
        created_at:
          type: string
          format: date-time
    SetRateRequest:
      type: object
      required:
        - rate
      properties:
        rate:
          type: string
    SetRequisitesRequest:
      type: object
      properties:
        requisites:
          type: string
          nullable: true
    StatusRequest:
      type: object
      required:
        - ids
      properties:
        ids:
          type: array
          items:
            type: integer
            format: int64
    StatusResponse:
      type: object
      required:
        - statuses
      properties:
        statuses:
          type: array
          items:
            $ref: "#/components/schemas/UserStatus"
    TimeBounds:
      type: object
      required:
        - start_datetime
        - end_datetime
      properties:
        start_datetime:
          type: string
          format: date-time
        end_datetime:
          type: string
          format: date-time
    TopUser:
      type: object
      required:
        - steam_id
        - amount
      properties:
        steam_id:
          type: integer
          format: int64
        amount:
          type: string
    TradeUrlForm:
      type: object
      properties:
        url:
          type: string
          nullable: true
    UnassignModeratorRequest:
      type: object
      required:
        - order_id
      properties:
        order_id:
          type: integer
          format: int64
    UnblacklistUserRequest:
      type: object
      required:
        - steam_id
      properties:
        steam_id:
          type: integer
          format: int64
    User:
      type: object
      required:
        - steam_id
      properties:
        steam_id:
          type: integer
          format: int64
        trade_url:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
    UserStatus:
      type: object
      required:
        - steam_id
        - is_online
      properties:
        steam_id:
          type: integer
          format: int64
        is_online:
          type: boolean
    VerifyForm:
      type: object
      required:
        - openid.ns
        - openid.mode
        - openid.op_endpoint
        - openid.claimed_id
        - openid.return_to
        - openid.response_nonce
        - openid.assoc_handle
        - openid.signed
        - openid.sig
      properties:
        openid.ns:
          type: string
        openid.mode:
          type: string
        openid.op_endpoint:
          type: string
        openid.claimed_id:
          type: string
        openid.identity:
          type: string
          nullable: true
        openid.return_to:
          type: string
        openid.response_nonce:
          type: string
        openid.invalidate_handle:
          type: string
          nullable: true
        openid.assoc_handle:
          type: string
        openid.signed:
          type: string
        openid.sig:
          type: string
    VideoReview:
      type: object
      required:
        - id
        - url
      properties:
        id:
          type: integer
          format: int64
        url:
          type: string
  securitySchemes:
    jwt_admin:
      type: apiKey
      in: header
      name: X-AM-Authorization
    jwt_user:
      type: http
      scheme: bearer
      bearerFormat: JWT
